aqlFile(className, statements, host, port) ::= <<

using System;
using System.Collections.Generic;
using System.IO;
//using System.Json;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Aerospike.Client;

namespace AQLGeneration
{
    class Program
    {

        static void Main(string[] args)
        {
        	AerospikeClient client;
			ClientPolicy clientPolicy;
            try
            {
				<statements>
            } 
            catch (AerospikeException e)
            {
                Console.WriteLine("AerospikeException - Message: " + e.Message);
                Console.WriteLine("AerospikeException - StackTrace: " + e.StackTrace);
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception - Message: " + e.Message);
                Console.WriteLine("Exception - StackTrace: " + e.StackTrace);
            }
            finally
            {
                if (client != null && client.Connected)
                {
                    // Close Aerospike server connection
                    client.Close();
                }
            }
            
        } //main
        
		public static void ScanCallback(Key key, Record record) {
			Console.WriteLine("Key: " + key);
			Console.WriteLine("Record: " + record);
		} //scanCallback

    }
}

>>

statements(statementList, variables) ::= <<
// Variables for statements

<variables>

// AQL statements - start
<statementList>
// AQL statements - finish, total: <length(statementList)>

>>


connect(source, host, port)::=<<
/* <source> */
/*
Host[] hosts = new Host[] {new Host("a.host", 3000),
							new Host("another.host", 3000),
							new Host("and.another.host", 300)};
client = new AerospikeClient(clientPolicy, hosts);
*/
clientPolicy = new ClientPolicy();
client = new AerospikeClient(clientPolicy, "<host>", <port>);

>>

disconnect(source)::=<<
/* <source> */
client.Close();

>>

queryPolicy()::=<<
QueryPolicy queryPolicy = new QueryPolicy();

>>

readPolicy()::=<<
Policy policy = new Policy();

>>

infoPolicy()::=<<
InfoPolicy infoPolicy = new InfoPolicy();

>>

infoString()::=<<
String infoResult = null;

>>

record()::=<<
Record record = null;

>>

recordSet()::=<<
RecordSet recordSet = null;

>>

resultSet()::=<<
ResultSet resultSet = null;

>>

scanPolicy()::=<<
ScanPolicy scanPolicy = new ScanPolicy();

>>

writePolicy()::=<<
WritePolicy writePolicy = new WritePolicy();

>>

adminPolicy()::=<<
AdminPolicy adminPolicy = new AdminPolicy();

>>


stmt()::=<<
Statement stmt = new Statement();

>>

udfFile()::=<<
string udfFileName = null;
string udfPath = null;

>>

registerTask()::=<<
RegisterTask task =	null;

>>

infoMessage()::=<<
String infoResult =	null;

>>

indexTask()::=<<
IndexTask indexTask = null;

>>

insertStmt(source, primaryKey, binNames, values) ::= <<
/* <source> */
writePolicy.recordExistsAction = RecordExistsAction.CREATE_ONLY;
client.Put(writePolicy, <primaryKey>, 
	<first(binNames),first(values):{z,vv|new Bin("<z>", <vv>)}><rest(binNames),rest(values):{z,vv|, new Bin("<z>", <vv>)}>);
			
>>

updateStmt(source, primaryKey, binList, generation, ttl)::=<<
/* <source> */
<if(ttl)>writePolicy.expiration = <ttl>;<endif>
<if(generation)><generation><endif>
writePolicy.recordExistsAction = RecordExistsAction.UPDATE;
<if(binList)>
client.Put(writePolicy, <primaryKey>, <first(binList):{z|<z>}><rest(binList):{z|, <z>}>);
<else>
client.Touch(writePolicy, <primaryKey>);
<endif>

>>

binList(bins) ::=<<
<first(binList):{z|<z>}><rest(binList):{z|, <z>}>
>>

binValue(binName, binValue) ::= <<
new Bin("<binName>", <binValue>)
>>

deleteStmt(source, primaryKey, generation) ::= <<
/* <source> */
<if(generation)>
writePolicy.generation = <generation>;
<endif>
client.Delete(writePolicy, <primaryKey>);

>>

query(source, nameSpace, setName, binNames, where) ::= <<
/* <source> */
stmt = new Statement();
stmt.SetNamespace("<nameSpace>");
stmt.SetSetName("<setName>");
stmt.SetFilters(<where>);
<if(binNames)>
stmt.SetBinNames(<first(binNames):{b|"<b>"}><rest(binNames):{b|, "<b>"}>);
<endif>
// Execute the query
recordSet = client.Query(queryPolicy, stmt);
// Process the record set
while (recordSet != null && recordSet.Next()) {
	Console.WriteLine("Key: " + recordSet.Key);
	Console.WriteLine("Record: " + recordSet.Record);
}
recordSet.Close();

>>

get(source, binNames, key) ::= <<
/* <source> */
<if(binNames)>
record = client.Get(policy, <key>, <first(binNames):{b|"<b>"}><rest(binNames):{b|, "<b>"}>);
<else>
record = client.Get(policy, <key>);
<endif>

>>

scan(source, nameSpace, setName, binNames)::=<<
/* <source> */
client.ScanAll(scanPolicy, "<nameSpace>", "<setName>", ScanCallback<if(binNames)><binNames:{b|, "<b>"}><endif>);

>>

aggregate(source, nameSpace, setName, 
				package, function,  
				arguments, where) ::= <<
/* <source> */
stmt = new Statement();
stmt.SetNamespace("<nameSpace>");
stmt.SetSetName("<setName>");
stmt.SetFilters(<where>);
resultSet = client.QueryAggregate(null, stmt, 
	"<package>", "<function>" <if(arguments)><arguments:{qq|, Value.Get(<qq>)}><endif>);
try {
	int count = 0;
	while (resultSet.Next()) {
		Console.WriteLine("Result: " + resultSet.Object);
		count++;
	}
	if (count == 0) {
		Console.WriteLine("No results returned.");			
	}
}
finally {
	resultSet.Close();
}
				
>>

createUser(source, user, password, roles)::=<<
/* <source> */
<if(roles)>
List\<String> roles = new ArrayList\<String>();
<roles:{r|roles.add("<r>");
}>
<endif>
client.CreateUser(adminPolicy, "<user>", "<password>"<if(roles)>, roles<endif>);

>>

dropUser(source, user)::=<<
/* <source> */
client.DropUser(adminPolicy, "<user>");

>>



create(source, indexName, nameSpace, setName, binName, type, collectionType) ::= <<
/* <source> */
indexTask = client.CreateIndex(policy, "<nameSpace>", "<setName>", "<indexName>", "<binName>", IndexType.<type>, IndexCollectionType.<collectionType>);
indexTask.Wait();
				
>>

dropIndex(source, indexName, nameSpace, setName) ::= <<
/* <source> */
client.DropIndex(policy, "<nameSpace>", "<setName>", "<indexName>");

>>

showIndex(source, nameSpace, setName) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "sindex<if(nameSpace)>/<nameSpace><endif><if(setName)>/<setName><endif>");

>>

statIndex(source, nameSpace, indexName) ::= <<
/* <source> */

>>

register(source, path) ::= <<
/* <source> */

task = client.Register(null, 
	Path.GetFullPath("<path>"), 
	Path.GetFileName("<path>"),
	Language.LUA); 
task.Wait();

>>

removeModule(source, module) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "udf-remove:filename=<module>");

>>

operateStatement(source, operations, key, generation)::=<<
/* <source> */
<if(generation)>
<generation>
<endif>
record = client.Operate(writePolicy, <key>, <first(operations):{b|<b>}><rest(operations):{b|, <b>}>);

>>

deleteSet(source, namespace, set)::= <<
/* <source> */
String[] infoResults = infoAll("set-config:context=namespace;id=<namespace>;set=<set>;set-delete=true;"));

>>

execute(source, nameSpace, nameSpace, setName, key, module, udf, arguments) ::= <<
/* <source> */
<if(key)>
client.Execute(null, <key>, "<module>", "<udf>"<if(arguments)><arguments:{z|, <z>}><endif>);
<else>
stmt = new Statement();
stmt.SetNamespace("<nameSpace>");
stmt.SetSetName("<setName>");
client.QueryAggregate(null, stmt, "<module>", "<udf>"<if(arguments)><arguments:{z|, <z>}><endif>);
<endif>

>>

setTimeOut(source, value) ::= <<
/* <source> */
clientPolicy.timeout = <value>;
policy.timeout = <value>;
writePolicy.timeout = <value>;

>>
 
setVerbose(source, value) ::= <<
/* <source> */

>>

setEcho(source, value) ::= <<
/* <source> */

>>

setTTL(source, value) ::= <<
/* <source> */
writePolicy.expiration = <value>;

>>

setView(source, type) ::= <<
/* <source> */

>>

useSmd(source, value) ::= <<
/* <source> */

>>

setUserPath(source, value) ::= <<
/* <source> */
LuaConfig.PackagePath = "<value>"; 

>>

setSystemPath(source, value) ::= <<
/* <source> */

>>

setUserPassword(source, user, password) ::= <<
/* <source> */

>>

getTimeout(source) ::= <<
/* <source> */
Console.WriteLine("Policy timeout: " + policy.timeout);
Console.WriteLine("Write policy timeout: " + writePolicy.timeout);

>>
getVerbose(source) ::= <<
/* <source> */

>>
getEcho(source) ::= <<
/* <source> */

>>
getTTL(source) ::= <<
/* <source> */
Console.WriteLine("Write policy expiration: " + writePolicy.expiration);

>>
getView(source) ::= <<
/* <source> */

>>
getUseSMD(source) ::= <<
/* <source> */

>>
getUserPath(source) ::= <<
/* <source> */
Console.WriteLine("Lua source directory: " + LuaConfig.PackagePath);

>>
getSystemPath(source) ::= <<
/* <source> */

>>

statQuery(source) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "query-stat");

>>

statSystem(source) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "statistics");

>>


filterEquals(bin, value) ::= <<
Filter.Equal("<bin>", <value>)
>>

filterRange(bin, low, high) ::= <<
Filter.Range("<bin>", <low>, <high>)
>>

primaryKey(namespace, set, key) ::=<<
new Key("<namespace>", "<set>", <key>)
>> 

primaryKeyString(key)::=<<
"<key>"
>>

primaryKeyNumeric(key)::=<<
<key>
>>


value(value) ::= <<
Value.Get(<value>)
>>

stringValue(value) ::= <<
Value.Get("<value>")
>>

jsonArrayValue(value) ::= <<
Value.GetAsList((JSONArray)JSONValue.parse("<value>"))
>>

jsonObjectValue(value) ::= <<
Value.GetAsMap((JSONObject)JSONValue.parse("<value>"))
>>


generationPredicate(generation) ::=<<
writePolicy.generation = <generation>;
writePolicy.generationPolicy = GenerationPolicy.EXPECT_GEN_EQUAL;

>>

operateFunction(functionName, bin, value) ::=<<
<if(value)>Operation.<functionName>(new Bin("<bin>", <value>))<elseif(bin)>Operation.<functionName>("<bin>")<else>Operation.<functionName>()<endif>
>>

showModules(source) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "udf-list");

>>

showNamespaces(source) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "namespaces");

>>

showSets(source) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "sets");

>>

showIndexes(source, nameSpace, setName) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "indexes");

>>

showBins(source) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "bins");

>>

showScans(source) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "jobs:module=scan");

>>

showQueries(source) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "jobs:module=query");

>>

showUser(source, user) ::= <<
/* <source> */
//TODO

>>

showUsers(source) ::= <<
/* <source> */
//TODO

>>


descIndex(source, nameSpace, indexName) ::= <<
/* <source> */
infoResult = Info.Request(infoPolicy, client.Nodes[0], "sindex-describe");

>>


descModule(source, name) ::= <<
/* <source> */
Console.WriteLine("Module: <name>");
infoResult = Info.Request(infoPolicy, client.Nodes[0], "udf-get:filename=<name>");
{
	string[] udfparts = infoResult.Split(';');
	string base64 = udfparts[2];
	Console.WriteLine(Convert.FromBase64String(base64));
}

>>

killQuery(source, id) ::= <<
/* <source> */
Info.Request(infoPolicy, client.Nodes[0], "query-kill=<id>");

>>

killScan(source, id) ::= <<
/* <source> */
Info.Request(infoPolicy, client.Nodes[0], "scan-kill=<id>");

>>

run(source, fileName) ::= <<
/* <source> */
Console.WriteLine("Run file: " + <fileName>);

>>
print(source, value) ::= <<
/* <source> */
Console.WriteLine("<value>");

>>