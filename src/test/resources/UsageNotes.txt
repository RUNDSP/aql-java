
=================================================================================
==
== Smiley
==

Here is the regex (ruby-style) used to detect smileys.  Have a Smiley day!

    # ==================================
    #
    # Smilies !!! ^_^
    #
    RE_SMILEYS_EYES  = '\\:8;'
    RE_SMILEYS_NOSE  = '\\-=\\*o'
    RE_SMILEYS_MOUTH = 'DP@Oo\\(\\)\\[\\]\\|\\{\\}\\/\\\\'
    RE_KAWAII_EARS   = '\\*\\|!\\/=\\#o@v;\\:\\._'
    RE_SMILEYS = ORegexp.new( %Q{
        (?:^|\\W)                       # non-smilie character
        (
          (?: [\\(\\[#{RE_KAWAII_EARS}df\\\\]{0,3} \\^[_\\-]\\^ [\\]\\)#{RE_KAWAII_EARS}Ab\\/]{,3} ) # super kawaaaaiiii!
         |(?:
            >?
            [#{RE_SMILEYS_EYES}]       # eyes
            [#{RE_SMILEYS_NOSE}]?      # nose, maybe
            [#{RE_SMILEYS_MOUTH}] )    # mouth
         |(?:
            [#{RE_SMILEYS_MOUTH}]      # mouth
            [#{RE_SMILEYS_NOSE}]?      # nose, maybe
            [#{RE_SMILEYS_EYES}]       # eyes
            <? )
         |(?: =[#{RE_SMILEYS_MOUTH}])  # =) (=
         |(?: [#{RE_SMILEYS_MOUTH}]=)  # =) (=
         |(?: \\^[_\\-]\\^  )          # kawaaaaiiii!
         |(?: \\((?:-_-|o\\.O|T_T|\\*\\^\\^\\*|\\^_~)\\);? ) # more faces
         |(?: <3 )                     # heart
         |(?: \\\\m/ )                 # rawk
         |(?: x-\\( )                  # dead
         |(?:XD|:>|:\\?|:<|:\\/)       # few more that don't fit the template
         |(?: :[,\\']\\( )             # snif  # make emacs non-unhappy: ']))
        )
        (?:\\W|$)
       }, 'x')
  end


  
=================================================================================
==
== Hashtag
==

    # ===========================================================================
    #
    # A hash following a non-alphanum_ (or at the start of the line
    # followed by (any number of alpha, num, -_.+:=) and ending in an alphanum_
    #
    # This is overly generous to those dorky triple tags (geo:lat=69.3), but we'll soldier on somehow.
    #
    RE_HASHTAGS        = ORegexp.new( '(?:^|\W)\#([\w\-_\.+:=]+\w)(?:\W|$)', 'i', 'utf8' )

=================================================================================
==
== URL
==

    # ===========================================================================
    #
    # Twitter accepts URLs somewhat idiosyncratically, probably for good reason --
    # we rarely see ()![] in urls; more likely in a status they are punctuation.
    #
    # This is what I've reverse engineered.
    #
    #
    # Notes:
    #
    # * is.gd uses a trailing '-' (to indicate 'preview mode'): clever.
    # * pastoid.com uses a trailing '+', and idek.net a trailing ~ for no reason. annoying.
    #
    # Counterexamples:
    # * http://www.5irecipe.cn/recipe_content/2307/'/
    # * http://www.facebook.com/groups.php?id=1347199977&gv=12#/group.php?gid=18183539495
    #
    RE_DOMAIN_HEAD       = '(?:[a-zA-Z0-9\\-]+\\.)+'
    RE_DOMAIN_TLD        = '(?:com|org|net|edu|gov|mil|biz|info|mobi|name|aero|jobs|museum|[a-zA-Z]{2})'
    # RE_URL_SCHEME      = '[a-zA-Z][a-zA-Z0-9\\-\\+\\.]+'
    RE_URL_SCHEME_STRICT = '[a-zA-Z]{3,6}'
    RE_URL_UNRESERVED    = 'a-zA-Z0-9'       + '\\-\\._~'
    RE_URL_OKCHARS       = RE_URL_UNRESERVED + '\'\\+\\,\\;=' + '/%:@'   # not !$&()* [] \|
    RE_URL_QUERYCHARS    = RE_URL_OKCHARS    + '&='
    RE_URL_HOSTPART      = "#{RE_URL_SCHEME_STRICT}://#{RE_DOMAIN_HEAD}#{RE_DOMAIN_TLD}"
    RE_URL               = ORegexp.new( %Q{(
                #{RE_URL_HOSTPART}                    # Host
     (?:(?: \\/ [#{RE_URL_OKCHARS}]+?          )*?    # path:  / delimited path segments
        (?: \\/ [#{RE_URL_OKCHARS}]*[\\w\\-\\+\\~] )  #        where the last one ends in a non-punctuation.
       |                                              #        ... or no path segment
                                              )/?     #        with an optional trailing slash
        (?: \\? [#{RE_URL_QUERYCHARS}]+  )?           # query: introduced by a ?, with &foo= delimited segments
        (?: \\# [#{RE_URL_OKCHARS}]+     )?           # frag:  introduced by a #
      )}, 'ix' )

    #
    # Technically a scheme can allow the characters '+', '-' and '.' within
    # it. In practice you can not only ignore those characters but all but a
    # few specific schemes.
    #
    # From a collection of ~9M tweeted urls, 99.4% were http://, with only the additional
    #   https, mms, ftp, git, irc, feed, itpc, rtsp, hxxp, gopher, telnet, itms, ssh, webcal, svn
    # seemingly worth finding:
    #
    #   8925742 http
    #      6026 https  1841 ivo  122 mms    85 ftp    61 git  53 irc   45 feed   31 itpc  12 www
    #        12 rtsp     12 hxxp  12 gopher  9 telnet  9 itms  7 ssh    5 webcal  5 sop    4 wiie
    #         3 svn       3 sssp   3 file    2 res     1 xttp  1 xmlrpc 1 ssl     1 smb
    #
    # An hxxp http://en.wikipedia.org/wiki/Hxxp is used to obscure a link, so
    # take of that what you may.
    #
    # The ivo:// scheme is used by virtual astronomical observatories; as its
    # hostnames are given in reverse-dotted notation (uk.org.estar) these URIs
    # are imperfectly recognized.  Twitter doesn't accept them at all:
    #   http://twitter.com/eSTAR_Project/status/1113930948
    #
    #
  end
